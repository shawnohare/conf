#!/usr/bin/env sh

# ----------------------------------------------------------------------------
# Switch nix configurations using nixos-rebuild, darwin-rebuild or
# home-manager (for standalone settings).
# ----------------------------------------------------------------------------

# Set global vars used in this script.
DIR="${HOME}/conf"
_STASH="${DIR}/lib/stash/bin/stash"

# Check if we are on macos.
if [ "$(uname -s)" = "Darwin" ]; then
    IS_MACOS=true
    REBUILD_CMD="darwin-rebuild"
    # APP_CONFIG="${HOME}/Library/Application Support"
    FIREFOX_PROFILES_DIR="${HOME}/Library/Application Support/Firefox/Profiles"
    LIBREWOLF_PROFILES_DIR="${HOME}/Library/Application Support/librewolf/Profiles"
else
    IS_MACOS=false
    REBUILD_CMD="nixos-rebuild"
    FIREFOX_PROFILES_DIR="${HOME}/.mozilla/firefox"
    LIBREWOLF_PROFILES_DIR="${HOME}/.librewolf"
fi

usage() {
    cat <<EOF
Usage:
    switch home [attribute]
    switch system [attribute]
    switch ln [options]
    switch update <package>

Commands:
    home   - Use (standalone) home-manager and stash to update user configuration.
    system - Update system settings in nixos or nix-darwin.
    ln     - Link configuration files not handled by home-manager.
    update - Update the flake lockfile's entry for the input package.

Options:
    -h|--help          Display this this usage message.
EOF
}

usage_home() {
    cat <<EOF
Description:
    Manage a system via a standalone home-manager installation.
    Do not use with a system configuration that includes home-manager as a
    module.

Usage:
    switch home [attribute]

Args:
    attribute: An attribute in the ${DIR}/flake.nix homeConfigurations output.
        Defaults to the current username.

Options:
    -h|--help          Display this this usage message.
EOF
}

usage_system() {
    cat <<EOF
Usage:
    switch system [attribute]

Args:
    attribute: An attribute in the ${DIR}/flake.nix nixosConfigurations or darwinConfigurations output.

Options:
    -h|--help          Display this this usage message.
EOF
}

usage_ln() {
    cat <<EOF
Usage:
    switch ln [options]

Description:
    Link configuration files not handled by home-manager. This is a thin
    wrapper around the stash symlink manager. All files to be linked should
    live in ${DIR}/etc.

Options:
    -h|--help          Display this this usage message.

Displaying help for ${_STASH}:

EOF
    "${_STASH}" --help
}

usage_update() {
    cat <<EOF
Usage:
    switch update <package>

Description:
    Update nixpkgs and the flake lockfile entry for the input package.

Options:
    -h|--help          Display this this usage message.

EOF
}

_nix_build() {
    # Build nix-darwin or home-manager (standalone) for first time.
    echo "switch: Building initial flake attribute with nix build ${DIR}/#$1"
    nix --verbose --show-trace --extra-experimental-features "nix-command flakes" build "${DIR}/#$1"
}

_nix_darwin_backup() {
    # Sometimes nix-darwin sees unrecognized files in /etc and aborts, e.g.,
    # after some system updates.
    echo "switch: Backing up files in /etc."
    sudo mv -v /etc/shells /etc/shells.before-nix-darwin
    sudo mv -v /etc/bashrc /etc/bashrc.before-nix-darwin
    sudo mv -v /etc/zshrc /etc/zshrc.before-nix-darwin
    sudo mv -v /etc/zprofile /etc/zprofile.before-nix-darwin
    sudo mv -v /etc/zshenv /etc/zshenv.before-nix-darwin
}

_build_nix_darwin() {
    # Build nix-darwin for first time.
    if [ -z "$1" ]; then
        echo "switch: No host specified to initialize nix-darwin."
    fi
    echo "switch: Did not detect darwin-rebuild command."
    _nix_darwin_backup
    _nix_build "darwinConfigurations.$1.system"
    return 0
}

_build_home_manager() {
    # Build home-manager for the first time.
    if [ -z "$1" ]; then
        echo "switch: No home-manager target specified."
        exit 1
    fi
    echo "switch: Did not detect home-manager command."
    echo "switch: Building home manager configuration for $1."
    _nix_build "homeConfigurations.$1.activationPackage"
    ./result/activate
    echo "switch: Restart shell to ensure changes."
}

_switch() {
    # Wrapper around nixos-rebuild|darwin-rebuild|home-manager switch command
    # usage: _switch cmd [attr]
    if [ -z "$1" ]; then
        echo "switch: rebuild command not specified."
        exit 1
    fi
    if [ -z "$2" ]; then
        attr="$DIR"
    else
        attr="$DIR/#$2"
    fi
    echo "switch: Switching configuration using $1 switch --flake ${attr}"
    "$1" --show-trace --verbose switch --flake "${attr}"
}


main_ln() {
    # Define which files get linked here.
    "${_STASH}" "$@" "${DIR}/etc/home" "${HOME}"
    # Link custom firefox CSS files. The profile name is dynamic.
    if [ -d "${FIREFOX_PROFILES_DIR}" ]; then
        "${_STASH}" "$@" "${DIR}/etc/home/.config/firefox/chrome" "$(find "${FIREFOX_PROFILES_DIR}"/*default* -maxdepth 0 -type d)/chrome"
    fi
    if [ -d "${LIBREWOLF_PROFILES_DIR}" ]; then
        "${_STASH}" "$@" "${DIR}/etc/home/.config/firefox/chrome" "$(find "${LIBREWOLF_PROFILES_DIR}"/*default-default -maxdepth 0 -type d)/chrome"
    fi
}


main_system() {
    # rebuild the system configuration.
    # target defaults to compute name
    target="${1:-$(hostname -s)}"
    cmd="${REBUILD_CMD}"
    # The rebuild command always exists on nixOS.
    if ! command -v "${REBUILD_CMD}" 1> /dev/null; then
        _build_nix_darwin "${target}"
        cmd="${DIR}/result/sw/bin/darwin-rebuild"
    fi
    _switch "${cmd}" "${target}"
    switch_ln --force
    return 0
}


main_home() {
    # rebuild the (standalone) home-manager configuration
    target="${1:-$(whoami)}"
    if ! command -v "home-manager" 1> /dev/null; then
        _build_home_manager "${target}"
    else
        _switch "home-manager" "${target}"
    fi
    
    switch_ln --force

    return 0
}

main_update() {
    # Update nixpkgs and the input package
    nix flake lock --update-input nixpkgs --update-input "$1"
}


main_init() {
    if [ "$(uname -s)" = "Darwin" ]; then
        xcode-select --install
    fi
    curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install
}

# Parse subcommands.
case "$1" in
    system|home|ln|update|init)
        cmd="$1"
        shift
        ;;
    backup)
        _nix_darwin_backup
        exit
        ;;
    --help|-h)
        usage
        exit
        ;;
    *)
        cmd="system"
        ;;
esac

# Parse subcommand args.
case "$1" in
    --help|-h)
        "usage_${cmd}"
        ;;
    *)
        "main_${cmd}" "$@"
        exit
        ;;
esac
